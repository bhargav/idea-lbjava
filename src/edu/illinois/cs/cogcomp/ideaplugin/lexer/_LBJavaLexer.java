/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/**
 * This software is released under the University of Illinois/Research and Academic Use License. See
 * the LICENSE file in the root folder for details. Copyright (c) 2016
 *
 * Developed by: The Cognitive Computations Group, University of Illinois at Urbana-Champaign
 * http://cogcomp.cs.illinois.edu/
 */
/// --- scanner.jflex ----------------------------------------- vim:syntax=lex
/// Author: Nick Rizzolo
/// Description:
///   JLex scanner specification for LBJava.  Currently, the LBJava language
///   supports C and C++ style comments that may be nested, identifiers
///   containing alpha-numeric characters and underscores and beginning with
///   either an alphabetic character or an underscore, and a minimum of
///   operators and keywords.
///
/// Modified by Christos Christodoulopoulos to be used inside Maven
///
/// Modified by Bhargav Mangipudi from JLex to JFlex format
/// --------------------------------------------------------------------------

package edu.illinois.cs.cogcomp.ideaplugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.JavaTokenType;
import com.intellij.psi.TokenType;
import edu.illinois.cs.cogcomp.ideaplugin.LBJavaElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>/Users/bhargav/cogcomp/idea-lbjava/src/edu/illinois/cs/cogcomp/ideaplugin/lexer/LBJava.jflex</tt>
 */
final class _LBJavaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int LINE_COMMENT = 4;
  public static final int JAVADOC_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\10\0\2\6\1\20\2\105\1\6\22\0\1\6\1\103\1\11\1\0\1\5\1\71\1\73\1\7\1\61\1"+
    "\62\1\17\1\70\1\67\1\23\1\21\1\16\1\1\3\15\4\3\2\2\1\100\1\60\1\75\1\101\1"+
    "\76\1\77\1\104\3\4\1\24\1\22\1\56\5\5\1\26\1\57\1\5\1\54\10\5\1\27\2\5\1\63"+
    "\1\10\1\64\1\74\1\5\1\0\1\31\1\12\1\35\1\45\1\40\1\25\1\50\1\37\1\46\1\55"+
    "\1\43\1\30\1\41\1\13\1\42\1\36\1\5\1\34\1\32\1\33\1\14\1\47\1\53\1\51\1\44"+
    "\1\52\1\65\1\72\1\66\1\102\6\0\1\105\242\0\2\105\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\2\4\1\5\1\6"+
    "\3\3\3\5\1\7\1\10\1\11\1\12\21\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\1\2\3\1\1\1\40"+
    "\1\2\2\3\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\41\2\0\10\5\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\45\5\1\54\1\5"+
    "\1\55\1\5\1\56\1\57\5\5\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\2\0\1\103\3\0\1\104\1\0\1\4\1\0\1\4"+
    "\5\0\5\5\1\105\2\5\1\106\3\5\1\107\22\5"+
    "\1\110\25\5\1\111\14\5\1\112\6\5\1\113\1\114"+
    "\1\115\1\116\1\117\3\0\2\5\1\120\1\121\5\5"+
    "\1\122\3\5\1\123\15\5\1\124\2\5\1\125\1\5"+
    "\1\126\3\5\1\127\2\5\1\130\2\5\1\131\7\5"+
    "\1\132\1\5\1\133\17\5\1\134\1\135\1\5\1\136"+
    "\1\137\2\0\1\140\3\5\1\141\1\142\1\143\1\5"+
    "\1\144\1\145\1\5\1\146\4\5\1\147\2\5\1\150"+
    "\1\151\3\5\1\152\4\5\1\153\1\154\1\5\1\155"+
    "\3\5\1\156\12\5\1\157\11\5\1\160\2\0\1\5"+
    "\1\161\1\5\1\162\2\5\1\163\1\5\1\164\1\5"+
    "\1\165\3\5\1\166\1\5\1\167\2\5\1\170\1\171"+
    "\1\172\2\5\1\173\10\5\1\174\3\5\1\175\5\5"+
    "\1\176\1\5\2\0\1\177\1\5\1\200\1\5\1\201"+
    "\12\5\1\202\3\5\1\203\2\5\1\204\2\5\1\205"+
    "\7\5\1\206\1\5\1\207\1\210\3\5\1\211\1\212"+
    "\1\5\1\213\3\5\1\214\1\215\1\216\1\217\1\220"+
    "\4\5\1\221\1\5\1\222\1\5\1\223\4\5\1\224"+
    "\1\5\1\225\1\5\1\226\5\5\1\227\1\230\1\5"+
    "\1\231\1\232\3\5\1\233\1\5\1\234\1\235\2\5"+
    "\1\236\1\5\1\237";

  private static int [] zzUnpackAction() {
    int [] result = new int[532];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\u094c\0\u0992\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u09d8\0\u0a1e\0\u0118\0\u0a64\0\u0aaa\0\u0af0\0\u0b36"+
    "\0\u0b7c\0\u0bc2\0\u0c08\0\u0118\0\u0c4e\0\u0c94\0\u0118\0\u0cda"+
    "\0\u0118\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0118\0\u0e38\0\u0e7e"+
    "\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u0118\0\u1022\0\u1068"+
    "\0\u10ae\0\u0118\0\u0302\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\u0118\0\u0118\0\u136a\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626"+
    "\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856"+
    "\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86"+
    "\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\u01ea\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u01ea\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u2044\0\u208a\0\u20d0\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u2116\0\u215c\0\u0118\0\u21a2\0\u0e7e\0\u21e8\0\u0118"+
    "\0\u0ec4\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2"+
    "\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u01ea\0\u25bc"+
    "\0\u2602\0\u0118\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06"+
    "\0\u01ea\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0"+
    "\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020"+
    "\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u01ea\0\u320a"+
    "\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a"+
    "\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a"+
    "\0\u36b0\0\u36f6\0\u0118\0\u0118\0\u373c\0\u0118\0\u0118\0\u3782"+
    "\0\u37c8\0\u380e\0\u3854\0\u389a\0\u01ea\0\u01ea\0\u38e0\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u01ea\0\u3a3e\0\u3a84\0\u3aca\0\u01ea"+
    "\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa"+
    "\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u01ea\0\u3e9e\0\u3ee4"+
    "\0\u01ea\0\u3f2a\0\u01ea\0\u3f70\0\u3fb6\0\u3ffc\0\u01ea\0\u4042"+
    "\0\u4088\0\u01ea\0\u40ce\0\u4114\0\u01ea\0\u415a\0\u41a0\0\u41e6"+
    "\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u01ea\0\u4344\0\u01ea\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba"+
    "\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u01ea\0\u01ea"+
    "\0\u47a4\0\u01ea\0\u0118\0\u47ea\0\u4830\0\u01ea\0\u4876\0\u48bc"+
    "\0\u4902\0\u01ea\0\u01ea\0\u01ea\0\u4948\0\u498e\0\u01ea\0\u49d4"+
    "\0\u01ea\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u01ea\0\u4b32\0\u4b78"+
    "\0\u01ea\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62"+
    "\0\u4da8\0\u4dee\0\u01ea\0\u01ea\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06"+
    "\0\u4f4c\0\u01ea\0\u4f92\0\u4fd8\0\u501e\0\u5064\0\u50aa\0\u50f0"+
    "\0\u5136\0\u517c\0\u51c2\0\u5208\0\u01ea\0\u524e\0\u5294\0\u52da"+
    "\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u01ea\0\u54c4"+
    "\0\u550a\0\u5550\0\u01ea\0\u5596\0\u01ea\0\u55dc\0\u5622\0\u01ea"+
    "\0\u5668\0\u01ea\0\u56ae\0\u01ea\0\u56f4\0\u573a\0\u5780\0\u01ea"+
    "\0\u57c6\0\u01ea\0\u580c\0\u5852\0\u01ea\0\u01ea\0\u5898\0\u58de"+
    "\0\u5924\0\u01ea\0\u596a\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8"+
    "\0\u5b0e\0\u5b54\0\u01ea\0\u5b9a\0\u5be0\0\u5c26\0\u01ea\0\u5c6c"+
    "\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u01ea\0\u5dca\0\u5e10\0\u5e56"+
    "\0\u01ea\0\u5e9c\0\u01ea\0\u5ee2\0\u01ea\0\u5f28\0\u5f6e\0\u5fb4"+
    "\0\u5ffa\0\u6040\0\u6086\0\u60cc\0\u6112\0\u6158\0\u619e\0\u01ea"+
    "\0\u61e4\0\u622a\0\u6270\0\u01ea\0\u62b6\0\u62fc\0\u01ea\0\u6342"+
    "\0\u6388\0\u01ea\0\u63ce\0\u6414\0\u645a\0\u64a0\0\u64e6\0\u652c"+
    "\0\u6572\0\u01ea\0\u65b8\0\u01ea\0\u01ea\0\u65fe\0\u6644\0\u668a"+
    "\0\u01ea\0\u66d0\0\u6716\0\u01ea\0\u675c\0\u67a2\0\u67e8\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u682e\0\u6874\0\u68ba\0\u6900"+
    "\0\u01ea\0\u6946\0\u01ea\0\u698c\0\u01ea\0\u69d2\0\u6a18\0\u6a5e"+
    "\0\u6aa4\0\u01ea\0\u6aea\0\u01ea\0\u6b30\0\u01ea\0\u6b76\0\u6bbc"+
    "\0\u6c02\0\u6c48\0\u6c8e\0\u01ea\0\u01ea\0\u6cd4\0\u01ea\0\u01ea"+
    "\0\u6d1a\0\u6d60\0\u6da6\0\u01ea\0\u6dec\0\u01ea\0\u01ea\0\u6e32"+
    "\0\u6e78\0\u01ea\0\u6ebe\0\u01ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[532];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\2\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\7\1\20\1\21\1\11\1\22"+
    "\1\10\1\23\1\10\1\24\2\10\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\10\1\40\1\41\1\42\1\43\2\10\1\44\4\10"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\0\16\72\1\73"+
    "\1\74\66\72\20\75\1\76\65\75\16\77\1\100\1\101"+
    "\66\77\107\0\1\102\1\103\1\102\11\0\1\102\3\0"+
    "\1\104\1\105\1\0\3\106\1\107\1\106\7\0\1\105"+
    "\4\0\1\106\3\0\1\107\4\0\1\106\30\0\3\7"+
    "\11\0\1\7\3\0\1\104\1\105\1\0\3\106\1\0"+
    "\1\106\7\0\1\105\4\0\1\106\10\0\1\106\30\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\34\10\34\0"+
    "\1\11\11\0\1\11\65\0\7\110\1\0\1\111\75\110"+
    "\16\0\1\112\67\0\10\113\1\114\1\106\74\113\1\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\10\10\1\115"+
    "\5\10\1\116\1\10\1\117\13\10\27\0\5\10\4\0"+
    "\2\10\1\120\1\10\4\0\1\10\1\0\5\10\1\121"+
    "\6\10\1\122\1\10\1\123\15\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\6\10\1\124\25\10\36\0"+
    "\1\125\5\0\1\126\1\127\61\0\1\130\22\0\1\131"+
    "\62\0\1\132\5\0\3\104\11\0\1\104\3\0\1\133"+
    "\107\0\1\134\52\0\1\135\2\0\1\136\5\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\4\10\1\137\1\140"+
    "\2\10\1\141\5\10\1\142\3\10\1\143\11\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\144"+
    "\1\10\1\145\15\10\27\0\5\10\4\0\1\146\3\10"+
    "\4\0\1\10\1\0\4\10\1\147\1\10\1\150\1\151"+
    "\24\10\27\0\5\10\4\0\2\10\1\152\1\10\4\0"+
    "\1\10\1\0\7\10\1\153\3\10\1\154\1\155\3\10"+
    "\1\156\6\10\1\157\4\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\10\10\1\160\2\10\1\161\1\162"+
    "\17\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\14\10\1\163\1\10\1\164\15\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\4\10\1\165\1\166\5\10"+
    "\1\167\2\10\1\170\4\10\1\171\10\10\27\0\5\10"+
    "\4\0\2\10\1\172\1\10\4\0\1\10\1\0\5\10"+
    "\1\173\2\10\1\174\23\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\14\10\1\175\17\10\27\0\5\10"+
    "\4\0\1\10\1\176\2\10\4\0\1\10\1\0\4\10"+
    "\1\177\16\10\1\200\1\10\1\201\6\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\5\10\1\202\14\10"+
    "\1\203\11\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\1\10\1\204\32\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\14\10\1\205\1\10\1\206\3\10"+
    "\1\207\11\10\27\0\5\10\4\0\1\10\1\210\2\10"+
    "\4\0\1\10\1\0\1\10\1\211\13\10\1\212\16\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\16\10"+
    "\1\213\15\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\16\10\1\214\15\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\13\10\1\215\6\10\1\216\11\10"+
    "\113\0\1\217\106\0\1\220\107\0\1\221\10\0\1\222"+
    "\105\0\1\223\76\0\1\224\6\0\1\225\77\0\1\226"+
    "\5\0\1\227\105\0\1\230\27\0\1\231\51\0\1\232"+
    "\3\0\1\233\102\0\1\234\2\0\1\235\104\0\1\236"+
    "\103\0\1\237\2\0\1\240\104\0\1\241\1\223\4\0"+
    "\16\72\1\242\1\243\105\72\1\244\104\72\1\131\1\245"+
    "\66\72\20\75\1\0\65\75\16\77\1\246\1\247\105\77"+
    "\1\0\104\77\1\250\1\251\66\77\1\0\1\102\1\103"+
    "\1\102\11\0\1\102\3\0\1\104\1\105\1\0\3\106"+
    "\1\0\1\106\7\0\1\105\4\0\1\106\10\0\1\106"+
    "\30\0\3\103\11\0\1\103\3\0\1\104\1\105\1\0"+
    "\2\106\12\0\1\105\4\0\1\106\10\0\1\106\30\0"+
    "\3\104\11\0\1\104\4\0\1\105\1\0\2\106\12\0"+
    "\1\105\4\0\1\106\10\0\1\106\30\0\3\252\11\0"+
    "\1\252\5\0\1\253\44\0\1\253\16\0\4\254\5\0"+
    "\1\254\2\0\1\254\4\0\1\254\1\0\2\254\3\0"+
    "\1\254\3\0\1\254\2\0\1\254\4\0\1\254\10\0"+
    "\1\254\36\0\1\106\77\0\1\255\1\0\1\256\3\0"+
    "\5\110\1\257\1\255\7\0\1\110\5\0\2\110\52\0"+
    "\1\260\1\0\1\260\3\0\5\113\1\261\1\260\7\0"+
    "\1\113\5\0\2\113\52\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\14\10\1\262\17\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\16\10\1\263\15\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\7\10\1\264"+
    "\24\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\4\10\1\265\27\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\7\10\1\266\24\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\27\10\1\267\4\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\10\10\1\270"+
    "\23\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\22\10\1\271\11\10\45\0\1\272\67\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\16\10\1\273\15\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\4\10\1\274"+
    "\27\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\16\10\1\275\15\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\10\10\1\276\23\10\27\0\5\10\4\0"+
    "\1\10\1\277\2\10\4\0\1\10\1\0\34\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\5\10\1\300"+
    "\26\10\27\0\5\10\4\0\1\10\1\301\2\10\4\0"+
    "\1\10\1\0\34\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\6\10\1\302\25\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\12\10\1\303\21\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\6\10\1\304"+
    "\25\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\4\10\1\305\10\10\1\306\16\10\27\0\5\10\4\0"+
    "\1\307\3\10\4\0\1\10\1\0\12\10\1\310\21\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\5\10"+
    "\1\311\2\10\1\312\23\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\16\10\1\313\15\10\27\0\5\10"+
    "\4\0\1\10\1\314\2\10\4\0\1\10\1\0\34\10"+
    "\27\0\5\10\4\0\1\10\1\315\2\10\4\0\1\10"+
    "\1\0\34\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\22\10\1\316\11\10\27\0\5\10\4\0\2\10"+
    "\1\317\1\10\4\0\1\10\1\0\5\10\1\320\12\10"+
    "\1\321\13\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\10\10\1\322\11\10\1\323\11\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\6\10\1\324\25\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\5\10"+
    "\1\325\1\10\1\326\24\10\27\0\5\10\4\0\2\10"+
    "\1\327\1\10\4\0\1\10\1\0\34\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\5\10\1\330\26\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\6\10"+
    "\1\331\1\332\1\10\1\333\22\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\5\10\1\334\26\10\27\0"+
    "\5\10\4\0\1\10\1\335\2\10\4\0\1\10\1\0"+
    "\34\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\5\10\1\336\26\10\27\0\5\10\4\0\1\337\3\10"+
    "\4\0\1\10\1\0\34\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\11\10\1\340\22\10\27\0\5\10"+
    "\4\0\2\10\1\341\1\10\4\0\1\10\1\0\14\10"+
    "\1\342\1\10\1\343\3\10\1\344\11\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\5\10\1\345\26\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\11\10"+
    "\1\346\7\10\1\347\12\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\6\10\1\350\25\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\5\10\1\351\26\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\7\10"+
    "\1\352\12\10\1\353\11\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\25\10\1\354\6\10\27\0\5\10"+
    "\4\0\1\10\1\355\2\10\4\0\1\10\1\0\25\10"+
    "\1\356\6\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\1\10\1\357\32\10\27\0\5\10\4\0\2\10"+
    "\1\360\1\10\4\0\1\10\1\0\34\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\6\10\1\361\25\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\1\10"+
    "\1\362\4\10\1\363\1\364\24\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\12\10\1\365\21\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\4\10\1\366"+
    "\15\10\1\367\11\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\7\10\1\370\24\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\22\10\1\371\11\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\7\10\1\372"+
    "\24\10\127\0\1\373\102\0\1\374\105\0\1\375\2\0"+
    "\1\376\4\0\17\72\1\0\104\72\1\0\1\243\104\72"+
    "\1\377\1\245\66\72\16\77\1\0\1\247\66\77\1\0"+
    "\3\252\11\0\1\252\6\0\2\106\17\0\1\106\10\0"+
    "\1\106\30\0\3\252\11\0\1\252\71\0\4\254\5\0"+
    "\1\254\2\0\1\254\4\0\1\254\1\0\2\254\1\106"+
    "\1\0\1\106\1\254\3\0\1\254\2\0\1\254\4\0"+
    "\1\254\10\0\1\254\30\0\1\u0100\1\0\1\u0100\11\0"+
    "\1\u0100\71\0\1\110\1\0\1\110\11\0\1\110\71\0"+
    "\4\u0101\5\0\1\u0101\1\0\1\257\1\u0101\4\0\1\u0101"+
    "\1\0\2\u0101\3\0\1\u0101\3\0\1\u0101\2\0\1\u0101"+
    "\4\0\1\u0101\10\0\1\u0101\30\0\1\113\1\0\1\113"+
    "\11\0\1\113\71\0\4\u0102\5\0\1\u0102\1\0\1\261"+
    "\1\u0102\4\0\1\u0102\1\0\2\u0102\3\0\1\u0102\3\0"+
    "\1\u0102\2\0\1\u0102\4\0\1\u0102\10\0\1\u0102\30\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\5\10\1\u0103"+
    "\26\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\4\10\1\u0104\27\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\14\10\1\u0105\17\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\4\10\1\u0106\27\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\22\10\1\u0107"+
    "\11\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\15\10\1\u0108\16\10\27\0\5\10\4\0\1\10\1\u0109"+
    "\2\10\4\0\1\10\1\0\34\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\5\10\1\u010a\26\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\6\10\1\u010b"+
    "\25\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\15\10\1\u010c\16\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\5\10\1\u010d\26\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\5\10\1\u010e\26\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\10\10\1\u010f"+
    "\23\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\24\10\1\u0110\7\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\7\10\1\u0111\24\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\13\10\1\u0112\20\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\u0113"+
    "\17\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\14\10\1\u0114\17\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\16\10\1\u0115\15\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\31\10\1\u0116\2\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\u0117"+
    "\17\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\7\10\1\u0118\24\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\22\10\1\u0119\11\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\10\10\1\u011a\23\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\6\10\1\u011b"+
    "\25\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\11\10\1\u011c\22\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\7\10\1\u011d\24\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\14\10\1\u011e\17\10\27\0"+
    "\5\10\4\0\1\10\1\u011f\2\10\4\0\1\10\1\0"+
    "\34\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\16\10\1\u0120\15\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\6\10\1\u0121\25\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u0122\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\4\10\1\u0123"+
    "\27\10\27\0\5\10\4\0\2\10\1\u0124\1\10\4\0"+
    "\1\10\1\0\34\10\27\0\5\10\4\0\1\10\1\u0125"+
    "\2\10\4\0\1\10\1\0\34\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\6\10\1\u0126\25\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\u0127"+
    "\17\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\11\10\1\u0128\22\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\13\10\1\u0129\20\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\10\10\1\u012a\23\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\6\10\1\u012b"+
    "\1\u012c\24\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\4\10\1\u012d\27\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\4\10\1\u012e\27\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\17\10\1\u012f\14\10"+
    "\27\0\5\10\4\0\1\10\1\u0130\2\10\4\0\1\10"+
    "\1\0\34\10\27\0\5\10\4\0\4\10\4\0\1\u0131"+
    "\1\0\34\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\7\10\1\u0132\14\10\1\u0133\7\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\23\10\1\u0134\10\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\21\10"+
    "\1\u0135\12\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\16\10\1\u0136\15\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\14\10\1\u0137\17\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\4\10\1\u0138\27\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\14\10"+
    "\1\u0139\17\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\6\10\1\u013a\25\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\22\10\1\u013b\11\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\22\10\1\u013c\11\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\14\10"+
    "\1\u013d\17\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\5\10\1\u013e\26\10\27\0\5\10\4\0\1\u013f"+
    "\3\10\4\0\1\10\1\0\34\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\11\10\1\u0140\22\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\u0141"+
    "\17\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\7\10\1\u0142\24\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\14\10\1\u0143\17\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\4\10\1\u0144\11\10\1\u0145"+
    "\15\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\5\10\1\u0146\26\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\21\10\1\u0147\12\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\16\10\1\u0148\15\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\4\10\1\u0149"+
    "\27\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\13\10\1\u014a\20\10\127\0\1\u014b\5\0\1\110\1\0"+
    "\1\110\3\0\1\106\5\0\1\110\71\0\4\u014c\5\0"+
    "\1\u014c\2\0\1\u014c\4\0\1\u014c\1\0\2\u014c\3\0"+
    "\1\u014c\3\0\1\u014c\2\0\1\u014c\4\0\1\u014c\10\0"+
    "\1\u014c\30\0\4\u014d\5\0\1\u014d\2\0\1\u014d\4\0"+
    "\1\u014d\1\0\2\u014d\3\0\1\u014d\3\0\1\u014d\2\0"+
    "\1\u014d\4\0\1\u014d\10\0\1\u014d\30\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\17\10\1\u014e\14\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\u014f"+
    "\17\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\23\10\1\u0150\10\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\5\10\1\u0151\26\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\24\10\1\u0152\7\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\7\10\1\u0153"+
    "\24\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\14\10\1\u0154\17\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\4\10\1\u0155\27\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\4\10\1\u0156\27\10\27\0"+
    "\5\10\4\0\1\10\1\u0157\2\10\4\0\1\10\1\0"+
    "\34\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\10\10\1\u0158\23\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\5\10\1\u0159\26\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\10\10\1\u015a\23\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\5\10\1\u015b"+
    "\26\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\6\10\1\u015c\25\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\14\10\1\u015d\17\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\10\10\1\u015e\23\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\22\10\1\u015f"+
    "\11\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\11\10\1\u0160\22\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\7\10\1\u0161\24\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\14\10\1\u0162\17\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\13\10\1\u0163"+
    "\20\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\11\10\1\u0164\22\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\6\10\1\u0165\25\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\27\10\1\u0166\4\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\22\10\1\u0167"+
    "\7\10\1\u0168\1\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\10\10\1\u0169\23\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\21\10\1\u016a\12\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\6\10\1\u016b"+
    "\25\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\13\10\1\u016c\20\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\14\10\1\u016d\17\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u016e\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\22\10\1\u016f"+
    "\11\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\22\10\1\u0170\11\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\5\10\1\u0171\26\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\14\10\1\u0172\17\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\25\10\1\u0173"+
    "\6\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\14\10\1\u0174\17\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\10\10\1\u0175\23\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\5\10\1\u0176\26\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\21\10\1\u0177"+
    "\12\10\27\0\5\10\4\0\2\10\1\u0178\1\10\4\0"+
    "\1\10\1\0\34\10\27\0\5\10\4\0\1\10\1\u0179"+
    "\2\10\4\0\1\10\1\0\34\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u017a\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\15\10\1\u017b"+
    "\16\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\15\10\1\u017c\16\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\21\10\1\u017d\12\10\27\0\5\10\4\0"+
    "\2\10\1\u017e\1\10\4\0\1\10\1\0\34\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\4\10\1\u017f"+
    "\27\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\10\10\1\u0180\23\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\10\10\1\u0181\23\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\5\10\1\u0182\26\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\10\10\1\u0183"+
    "\23\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\14\10\1\u0184\17\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\10\10\1\u0185\23\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u0186\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\u0187"+
    "\17\10\27\0\4\u0188\5\0\1\u0188\2\0\1\u0188\4\0"+
    "\1\u0188\1\0\2\u0188\3\0\1\u0188\3\0\1\u0188\2\0"+
    "\1\u0188\4\0\1\u0188\10\0\1\u0188\30\0\4\u0189\5\0"+
    "\1\u0189\2\0\1\u0189\4\0\1\u0189\1\0\2\u0189\3\0"+
    "\1\u0189\3\0\1\u0189\2\0\1\u0189\4\0\1\u0189\10\0"+
    "\1\u0189\30\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\5\10\1\u018a\26\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\14\10\1\u018b\17\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\4\10\1\u018c\27\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\4\10\1\u018d"+
    "\27\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\4\10\1\u018e\27\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\5\10\1\u018f\26\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u0190\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\6\10\1\u0191"+
    "\25\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\7\10\1\u0192\24\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\11\10\1\u0193\22\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\11\10\1\u0194\22\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\7\10\1\u0195"+
    "\24\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\5\10\1\u0196\26\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\10\10\1\u0197\23\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\13\10\1\u0198\20\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\22\10\1\u0199"+
    "\11\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\6\10\1\u019a\25\10\27\0\5\10\4\0\1\10\1\u019b"+
    "\2\10\4\0\1\10\1\0\34\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\10\10\1\u019c\23\10\27\0"+
    "\5\10\4\0\1\10\1\u019d\2\10\4\0\1\10\1\0"+
    "\34\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\6\10\1\u019e\25\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\21\10\1\u019f\12\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\10\10\1\u01a0\23\10\27\0"+
    "\5\10\4\0\1\10\1\u01a1\2\10\4\0\1\10\1\0"+
    "\34\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\11\10\1\u01a2\22\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\24\10\1\u01a3\7\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u01a4\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\11\10\1\u01a5"+
    "\22\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\14\10\1\u01a6\17\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\7\10\1\u01a7\24\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\22\10\1\u01a8\11\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\5\10\1\u01a9"+
    "\26\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\21\10\1\u01aa\12\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\6\10\1\u01ab\25\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\22\10\1\u01ac\11\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\22\10\1\u01ad"+
    "\11\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\4\10\1\u01ae\27\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\14\10\1\u01af\17\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\14\10\1\u01b0\17\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\u01b1"+
    "\17\10\27\0\5\10\4\0\1\10\1\u01b2\2\10\4\0"+
    "\1\10\1\0\34\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\1\10\1\u01b3\32\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\15\10\1\u01b4\16\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\7\10\1\u01b5"+
    "\24\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\22\10\1\u01b6\11\10\27\0\4\u01b7\5\0\1\u01b7\2\0"+
    "\1\u01b7\4\0\1\u01b7\1\0\2\u01b7\3\0\1\u01b7\3\0"+
    "\1\u01b7\2\0\1\u01b7\4\0\1\u01b7\10\0\1\u01b7\30\0"+
    "\4\u01b8\5\0\1\u01b8\2\0\1\u01b8\4\0\1\u01b8\1\0"+
    "\2\u01b8\3\0\1\u01b8\3\0\1\u01b8\2\0\1\u01b8\4\0"+
    "\1\u01b8\10\0\1\u01b8\30\0\5\10\4\0\1\10\1\u01b9"+
    "\2\10\4\0\1\10\1\0\34\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\22\10\1\u01ba\11\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\20\10\1\u01bb"+
    "\13\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\11\10\1\u01bc\22\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\7\10\1\u01bd\24\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u01be\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\1\10\1\u01bf"+
    "\32\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\4\10\1\u01c0\27\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\16\10\1\u01c1\15\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\14\10\1\u01c2\17\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\24\10\1\u01c3"+
    "\7\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\16\10\1\u01c4\15\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\22\10\1\u01c5\11\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\5\10\1\u01c6\26\10\27\0"+
    "\5\10\4\0\2\10\1\u01c7\1\10\4\0\1\10\1\0"+
    "\34\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\14\10\1\u01c8\17\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\10\10\1\u01c9\23\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u01ca\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\6\10\1\u01cb"+
    "\25\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\14\10\1\u01cc\17\10\27\0\5\10\4\0\1\10\1\u01cd"+
    "\2\10\4\0\1\10\1\0\34\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u01ce\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\6\10\1\u01cf"+
    "\25\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\26\10\1\u01d0\5\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\26\10\1\u01d1\5\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u01d2\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\7\10\1\u01d3"+
    "\24\10\27\0\5\10\4\0\1\10\1\u01d4\2\10\4\0"+
    "\1\10\1\0\34\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\11\10\1\u01d5\22\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\5\10\1\u01d6\26\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\u01d7"+
    "\17\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\4\10\1\u01d8\27\10\36\0\1\256\105\0\1\260\76\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\26\10\1\u01d9"+
    "\5\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\7\10\1\u01da\24\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\7\10\1\u01db\24\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\12\10\1\u01dc\21\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\4\10\1\u01dd"+
    "\27\10\27\0\5\10\4\0\1\10\1\u01de\2\10\4\0"+
    "\1\10\1\0\34\10\27\0\5\10\4\0\1\10\1\u01df"+
    "\2\10\4\0\1\10\1\0\34\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\33\10\1\u01e0\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\15\10\1\u01e1\16\10"+
    "\27\0\5\10\4\0\1\10\1\u01e2\2\10\4\0\1\10"+
    "\1\0\34\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\22\10\1\u01e3\11\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\14\10\1\u01e4\17\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\5\10\1\u01e5\26\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\14\10"+
    "\1\u01e6\17\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\6\10\1\u01e7\25\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\24\10\1\u01e8\7\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\14\10\1\u01e9\17\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\14\10"+
    "\1\u01ea\17\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\14\10\1\u01eb\17\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\14\10\1\u01ec\17\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\11\10\1\u01ed\22\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\14\10"+
    "\1\u01ee\17\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\11\10\1\u01ef\22\10\27\0\5\10\4\0\1\10"+
    "\1\u01f0\2\10\4\0\1\10\1\0\34\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\14\10\1\u01f1\17\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\14\10"+
    "\1\u01f2\17\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\16\10\1\u01f3\15\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\22\10\1\u01f4\11\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\7\10\1\u01f5\24\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\14\10"+
    "\1\u01f6\17\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\15\10\1\u01f7\16\10\27\0\5\10\4\0\1\10"+
    "\1\u01f8\2\10\4\0\1\10\1\0\34\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\11\10\1\u01f9\22\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\21\10"+
    "\1\u01fa\12\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\30\10\1\u01fb\3\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\14\10\1\u01fc\17\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\16\10\1\u01fd\15\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\14\10"+
    "\1\u01fe\17\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\7\10\1\u01ff\24\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\21\10\1\u0200\12\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\26\10\1\u0201\5\10"+
    "\27\0\5\10\4\0\4\10\4\0\1\10\1\0\7\10"+
    "\1\u0202\24\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\5\10\1\u0203\26\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\7\10\1\u0204\24\10\27\0\5\10"+
    "\4\0\4\10\4\0\1\10\1\0\7\10\1\u0205\24\10"+
    "\27\0\5\10\4\0\2\10\1\u0206\1\10\4\0\1\10"+
    "\1\0\34\10\27\0\5\10\4\0\4\10\4\0\1\10"+
    "\1\0\1\10\1\u0207\32\10\27\0\5\10\4\0\4\10"+
    "\4\0\1\10\1\0\6\10\1\u0208\25\10\27\0\5\10"+
    "\4\0\1\u0209\3\10\4\0\1\10\1\0\34\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\14\10\1\u020a"+
    "\17\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\10\10\1\u020b\23\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\12\10\1\u020c\21\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\7\10\1\u020d\24\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\20\10\1\u020e"+
    "\13\10\27\0\5\10\4\0\4\10\4\0\1\10\1\0"+
    "\21\10\1\u020f\12\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\22\10\1\u0210\11\10\27\0\5\10\4\0"+
    "\4\10\4\0\1\10\1\0\12\10\1\u0211\21\10\27\0"+
    "\5\10\4\0\4\10\4\0\1\10\1\0\11\10\1\u0212"+
    "\22\10\27\0\5\10\4\0\2\10\1\u0213\1\10\4\0"+
    "\1\10\1\0\34\10\27\0\5\10\4\0\4\10\4\0"+
    "\1\10\1\0\7\10\1\u0214\24\10\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\1\1\11\37\1\5\11\2\1"+
    "\1\11\7\1\1\11\2\1\1\11\1\1\1\11\4\1"+
    "\1\11\4\1\1\0\1\1\1\0\1\11\3\0\1\11"+
    "\2\0\10\1\2\11\1\1\7\11\60\1\13\11\3\1"+
    "\5\11\2\0\1\11\3\0\1\11\1\0\1\1\1\0"+
    "\1\1\5\0\10\1\1\11\100\1\2\11\1\1\2\11"+
    "\3\0\110\1\1\11\2\0\72\1\2\0\55\1\2\0"+
    "\134\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[532];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Declarations for variables, subroutines, etc. accessible to all
  // scanner actions.
  public String sourceFilename;  
  private int comment_nest = 0;
  // Scanner macros.
  // The text inside a block comment can include any characters including "/"
  // and "*", as long as they don't fall in either of these orders: "/*" or
  // "*/".  Notice that the COMMENT_TEXT regular expression will not match any
  // amount of consecutive "*" characters if they are immediately followed by
  // a "/".


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _LBJavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 160: break;
          case 2: 
            { return LBJavaElementTypes.JAVADOC_COMMENT;
            }
          case 161: break;
          case 3: 
            { // ScannerError.illegalCharacterError();
  return TokenType.ERROR_ELEMENT;
            }
          case 162: break;
          case 4: 
            { return LBJavaElementTypes.LITERAL;
            }
          case 163: break;
          case 5: 
            { return JavaTokenType.IDENTIFIER;
            }
          case 164: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            }
          case 165: break;
          case 7: 
            { return JavaTokenType.DIV;
            }
          case 166: break;
          case 8: 
            { return JavaTokenType.ASTERISK;
            }
          case 167: break;
          case 9: 
            { return JavaTokenType.DOT;
            }
          case 168: break;
          case 10: 
            { return JavaTokenType.MINUS;
            }
          case 169: break;
          case 11: 
            { return JavaTokenType.SEMICOLON;
            }
          case 170: break;
          case 12: 
            { return JavaTokenType.LPARENTH;
            }
          case 171: break;
          case 13: 
            { return JavaTokenType.RPARENTH;
            }
          case 172: break;
          case 14: 
            { return JavaTokenType.LBRACKET;
            }
          case 173: break;
          case 15: 
            { return JavaTokenType.RBRACKET;
            }
          case 174: break;
          case 16: 
            { return JavaTokenType.LBRACE;
            }
          case 175: break;
          case 17: 
            { return JavaTokenType.RBRACE;
            }
          case 176: break;
          case 18: 
            { return JavaTokenType.COMMA;
            }
          case 177: break;
          case 19: 
            { return JavaTokenType.PLUS;
            }
          case 178: break;
          case 20: 
            { return JavaTokenType.PERC;
            }
          case 179: break;
          case 21: 
            { return JavaTokenType.OR;
            }
          case 180: break;
          case 22: 
            { return JavaTokenType.AND;
            }
          case 181: break;
          case 23: 
            { return JavaTokenType.XOR;
            }
          case 182: break;
          case 24: 
            { return JavaTokenType.LT;
            }
          case 183: break;
          case 25: 
            { return JavaTokenType.GT;
            }
          case 184: break;
          case 26: 
            { return JavaTokenType.QUEST;
            }
          case 185: break;
          case 27: 
            { return JavaTokenType.COLON;
            }
          case 186: break;
          case 28: 
            { return JavaTokenType.EQ;
            }
          case 187: break;
          case 29: 
            { return JavaTokenType.TILDE;
            }
          case 188: break;
          case 30: 
            { return JavaTokenType.EXCL;
            }
          case 189: break;
          case 31: 
            { return JavaTokenType.AT;
            }
          case 190: break;
          case 32: 
            { yybegin(YYINITIAL);
            }
          case 191: break;
          case 33: 
            { return LBJavaElementTypes.DISJUNCTION;
            }
          case 192: break;
          case 34: 
            { return LBJavaElementTypes.CONJUNCTION;
            }
          case 193: break;
          case 35: 
            { yybegin(LINE_COMMENT);
            }
          case 194: break;
          case 36: 
            { yybegin(BLOCK_COMMENT); comment_nest++;
            }
          case 195: break;
          case 37: 
            { return JavaTokenType.DIVEQ;
            }
          case 196: break;
          case 38: 
            { // It should be ok to match "*/" in any state.  Of course, we wanted to
  // match it in the BLOCK_COMMENT state anyway.  It's also ok in YYINITIAL,
  // since "*/" is not an operator or delimiter and it can't be part of a
  // reserved word or identifier.  Also, it's never syntactically correct for
  // the "*" operator to be immediately followed by the "/" operator.
  // Finally, this rule will never be matched in the LINE_COMMENT state, since
  // the first LINE_COMMENT rule above matches as much as possible and it
  // appears before this rule.

  comment_nest--;
  if (comment_nest == 0) yybegin(YYINITIAL);
  else if (comment_nest < 0)
  {
    // If this ever happens, it will be because comment_nest == -1.  If more
    // code follows, and in particular another block comment, the comment_nest
    // variable should not be starting from -1 when it begins to keep track of
    // the new nested comments.  Hence, the next line of code below.
    comment_nest++;
    // ScannerError.commentEndWithoutBegin();
    return TokenType.ERROR_ELEMENT;
  }
            }
          case 197: break;
          case 39: 
            { return JavaTokenType.ASTERISKEQ;
            }
          case 198: break;
          case 40: 
            { return LBJavaElementTypes.DOTDOT;
            }
          case 199: break;
          case 41: 
            { return JavaTokenType.MINUSMINUS;
            }
          case 200: break;
          case 42: 
            { return LBJavaElementTypes.RARROW;
            }
          case 201: break;
          case 43: 
            { return JavaTokenType.MINUSEQ;
            }
          case 202: break;
          case 44: 
            { return LBJavaElementTypes.OF;
            }
          case 203: break;
          case 45: 
            { return JavaTokenType.DO_KEYWORD;
            }
          case 204: break;
          case 46: 
            { return LBJavaElementTypes.IN;
            }
          case 205: break;
          case 47: 
            { return JavaTokenType.IF_KEYWORD;
            }
          case 206: break;
          case 48: 
            { return LBJavaElementTypes.LBRACEBRACE;
            }
          case 207: break;
          case 49: 
            { return LBJavaElementTypes.RBRACEBRACE;
            }
          case 208: break;
          case 50: 
            { return JavaTokenType.PLUSPLUS;
            }
          case 209: break;
          case 51: 
            { return JavaTokenType.PLUSEQ;
            }
          case 210: break;
          case 52: 
            { return JavaTokenType.PERCEQ;
            }
          case 211: break;
          case 53: 
            { return JavaTokenType.OROR;
            }
          case 212: break;
          case 54: 
            { return JavaTokenType.OREQ;
            }
          case 213: break;
          case 55: 
            { return JavaTokenType.ANDAND;
            }
          case 214: break;
          case 56: 
            { return JavaTokenType.ANDEQ;
            }
          case 215: break;
          case 57: 
            { return JavaTokenType.XOREQ;
            }
          case 216: break;
          case 58: 
            { return LBJavaElementTypes.ARROW;
            }
          case 217: break;
          case 59: 
            { return JavaTokenType.LTLT;
            }
          case 218: break;
          case 60: 
            { return LBJavaElementTypes.LTEQ;
            }
          case 219: break;
          case 61: 
            { return JavaTokenType.GTGT;
            }
          case 220: break;
          case 62: 
            { return LBJavaElementTypes.GTEQ;
            }
          case 221: break;
          case 63: 
            { return JavaTokenType.DOUBLE_COLON;
            }
          case 222: break;
          case 64: 
            { return LBJavaElementTypes.IMPLICATION;
            }
          case 223: break;
          case 65: 
            { return JavaTokenType.EQEQ;
            }
          case 224: break;
          case 66: 
            { return LBJavaElementTypes.BANGCOLON;
            }
          case 225: break;
          case 67: 
            { comment_nest++;
            }
          case 226: break;
          case 68: 
            { yybegin(YYINITIAL);
  return LBJavaElementTypes.JAVADOC_END_COMMENT;
            }
          case 227: break;
          case 69: 
            { return JavaTokenType.NEW_KEYWORD;
            }
          case 228: break;
          case 70: 
            { yybegin(JAVADOC_COMMENT);
            }
          case 229: break;
          case 71: 
            { return JavaTokenType.FOR_KEYWORD;
            }
          case 230: break;
          case 72: 
            { return JavaTokenType.TRY_KEYWORD;
            }
          case 231: break;
          case 73: 
            { return LBJavaElementTypes.END;
            }
          case 232: break;
          case 74: 
            { return JavaTokenType.INT_KEYWORD;
            }
          case 233: break;
          case 75: 
            { return JavaTokenType.LTLTEQ;
            }
          case 234: break;
          case 76: 
            { return LBJavaElementTypes.DOUBLEIMPLICATION;
            }
          case 235: break;
          case 77: 
            { return JavaTokenType.GTGTGT;
            }
          case 236: break;
          case 78: 
            { return JavaTokenType.GTGTEQ;
            }
          case 237: break;
          case 79: 
            { // It might have been a little cleaner to include zero width look ahead
  // assertions in the COMMENT_TEXT regular expressions so that this rule
  // wasn't necessary, but jlex does not support them.  So, this rule takes
  // care of comments ended with more than one "*" and then a "/" in the
  // BLOCK_COMMENT state.  In the YYINITIAL state, we will let the extra "*"
  // characters be treated as operators, but "*/" will still be treated as an
  // end of comment delimiter.
  comment_nest--;
  if (comment_nest == 0) yybegin(YYINITIAL);
            }
          case 238: break;
          case 80: 
            { return JavaTokenType.BYTE_KEYWORD;
            }
          case 239: break;
          case 81: 
            { return JavaTokenType.NULL_KEYWORD;
            }
          case 240: break;
          case 82: 
            { return LBJavaElementTypes.FROM;
            }
          case 241: break;
          case 83: 
            { return JavaTokenType.LONG_KEYWORD;
            }
          case 242: break;
          case 84: 
            { return JavaTokenType.TRUE_KEYWORD;
            }
          case 243: break;
          case 85: 
            { return JavaTokenType.THIS_KEYWORD;
            }
          case 244: break;
          case 86: 
            { return LBJavaElementTypes.REAL;
            }
          case 245: break;
          case 87: 
            { return JavaTokenType.CASE_KEYWORD;
            }
          case 246: break;
          case 88: 
            { return JavaTokenType.CHAR_KEYWORD;
            }
          case 247: break;
          case 89: 
            { return LBJavaElementTypes.CVAL;
            }
          case 248: break;
          case 90: 
            { return LBJavaElementTypes.HEAD;
            }
          case 249: break;
          case 91: 
            { return JavaTokenType.ELSE_KEYWORD;
            }
          case 250: break;
          case 92: 
            { return JavaTokenType.VOID_KEYWORD;
            }
          case 251: break;
          case 93: 
            { return JavaTokenType.GOTO_KEYWORD;
            }
          case 252: break;
          case 94: 
            { return JavaTokenType.WITH_KEYWORD;
            }
          case 253: break;
          case 95: 
            { return JavaTokenType.GTGTGTEQ;
            }
          case 254: break;
          case 96: 
            { return JavaTokenType.BREAK_KEYWORD;
            }
          case 255: break;
          case 97: 
            { return LBJavaElementTypes.USING;
            }
          case 256: break;
          case 98: 
            { return JavaTokenType.FLOAT_KEYWORD;
            }
          case 257: break;
          case 99: 
            { return JavaTokenType.FALSE_KEYWORD;
            }
          case 258: break;
          case 100: 
            { return JavaTokenType.FINAL_KEYWORD;
            }
          case 259: break;
          case 101: 
            { return LBJavaElementTypes.LEARN;
            }
          case 260: break;
          case 102: 
            { return LBJavaElementTypes.ALPHA;
            }
          case 261: break;
          case 103: 
            { return JavaTokenType.SUPER_KEYWORD;
            }
          case 262: break;
          case 104: 
            { return JavaTokenType.SHORT_KEYWORD;
            }
          case 263: break;
          case 105: 
            { return LBJavaElementTypes.SENSE;
            }
          case 264: break;
          case 106: 
            { return JavaTokenType.THROW_KEYWORD;
            }
          case 265: break;
          case 107: 
            { return JavaTokenType.CLASS_KEYWORD;
            }
          case 266: break;
          case 108: 
            { return JavaTokenType.CATCH_KEYWORD;
            }
          case 267: break;
          case 109: 
            { return JavaTokenType.CONST_KEYWORD;
            }
          case 268: break;
          case 110: 
            { return LBJavaElementTypes.PRUNE;
            }
          case 269: break;
          case 111: 
            { return LBJavaElementTypes.MIXED;
            }
          case 270: break;
          case 112: 
            { return JavaTokenType.WHILE_KEYWORD;
            }
          case 271: break;
          case 113: 
            { return JavaTokenType.NATIVE_KEYWORD;
            }
          case 272: break;
          case 114: 
            { return LBJavaElementTypes.FORALL;
            }
          case 273: break;
          case 115: 
            { return JavaTokenType.ASSERT_KEYWORD;
            }
          case 274: break;
          case 116: 
            { return LBJavaElementTypes.ATMOST;
            }
          case 275: break;
          case 117: 
            { return JavaTokenType.STATIC_KEYWORD;
            }
          case 276: break;
          case 118: 
            { return JavaTokenType.SWITCH_KEYWORD;
            }
          case 277: break;
          case 119: 
            { return JavaTokenType.THROWS_KEYWORD;
            }
          case 278: break;
          case 120: 
            { return JavaTokenType.RETURN_KEYWORD;
            }
          case 279: break;
          case 121: 
            { return LBJavaElementTypes.ROUNDS;
            }
          case 280: break;
          case 122: 
            { return LBJavaElementTypes.CACHED;
            }
          case 281: break;
          case 123: 
            { return JavaTokenType.PUBLIC_KEYWORD;
            }
          case 282: break;
          case 124: 
            { return LBJavaElementTypes.EXISTS;
            }
          case 283: break;
          case 125: 
            { return JavaTokenType.DOUBLE_KEYWORD;
            }
          case 284: break;
          case 126: 
            { return JavaTokenType.IMPORT_KEYWORD;
            }
          case 285: break;
          case 127: 
            { return JavaTokenType.BOOLEAN_KEYWORD;
            }
          case 286: break;
          case 128: 
            { return JavaTokenType.FINALLY_KEYWORD;
            }
          case 287: break;
          case 129: 
            { return LBJavaElementTypes.ATLEAST;
            }
          case 288: break;
          case 130: 
            { return JavaTokenType.PACKAGE_KEYWORD;
            }
          case 289: break;
          case 131: 
            { return JavaTokenType.PRIVATE_KEYWORD;
            }
          case 290: break;
          case 132: 
            { return JavaTokenType.EXTENDS_KEYWORD;
            }
          case 291: break;
          case 133: 
            { return JavaTokenType.DEFAULT_KEYWORD;
            }
          case 292: break;
          case 134: 
            { return JavaTokenType.ABSTRACT_KEYWORD;
            }
          case 293: break;
          case 135: 
            { return JavaTokenType.STRICTFP_KEYWORD;
            }
          case 294: break;
          case 136: 
            { return LBJavaElementTypes.SENSEALL;
            }
          case 295: break;
          case 137: 
            { return LBJavaElementTypes.TESTFROM;
            }
          case 296: break;
          case 138: 
            { return LBJavaElementTypes.CACHEDIN;
            }
          case 297: break;
          case 139: 
            { return JavaTokenType.CONTINUE_KEYWORD;
            }
          case 298: break;
          case 140: 
            { return LBJavaElementTypes.ENCODING;
            }
          case 299: break;
          case 141: 
            { return LBJavaElementTypes.EVALUATE;
            }
          case 300: break;
          case 142: 
            { return LBJavaElementTypes.MAXIMIZE;
            }
          case 301: break;
          case 143: 
            { return LBJavaElementTypes.MINIMIZE;
            }
          case 302: break;
          case 144: 
            { return LBJavaElementTypes.DISCRETE;
            }
          case 303: break;
          case 145: 
            { return JavaTokenType.VOLATILE_KEYWORD;
            }
          case 304: break;
          case 146: 
            { return LBJavaElementTypes.SUBJECTTO;
            }
          case 305: break;
          case 147: 
            { return JavaTokenType.TRANSIENT_KEYWORD;
            }
          case 306: break;
          case 148: 
            { return JavaTokenType.PROTECTED_KEYWORD;
            }
          case 307: break;
          case 149: 
            { return LBJavaElementTypes.INFERENCE;
            }
          case 308: break;
          case 150: 
            { return JavaTokenType.INTERFACE_KEYWORD;
            }
          case 309: break;
          case 151: 
            { return LBJavaElementTypes.CONSTRAINT;
            }
          case 310: break;
          case 152: 
            { return LBJavaElementTypes.PREEXTRACT;
            }
          case 311: break;
          case 153: 
            { return JavaTokenType.INSTANCEOF_KEYWORD;
            }
          case 312: break;
          case 154: 
            { return JavaTokenType.IMPLEMENTS_KEYWORD;
            }
          case 313: break;
          case 155: 
            { return LBJavaElementTypes.CACHEDINMAP;
            }
          case 314: break;
          case 156: 
            { return LBJavaElementTypes.NORMALIZEDBY;
            }
          case 315: break;
          case 157: 
            { return JavaTokenType.SYNCHRONIZED_KEYWORD;
            }
          case 316: break;
          case 158: 
            { return LBJavaElementTypes.TESTINGMETRIC;
            }
          case 317: break;
          case 159: 
            { return LBJavaElementTypes.PROGRESSOUTPUT;
            }
          case 318: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
